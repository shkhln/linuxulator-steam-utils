#!/usr/bin/env ruby
# encoding: UTF-8

require 'fileutils'
require_relative '.utils'

DIST_PATH = File.join(ENV['HOME'], '.steam/dist')
DPKGS     = {
  'libc6_2.35-0ubuntu3.6_amd64.deb'                         => {sha256: '6e20662b2c1347d069819261c6fd4c158e95fa13e91e31bb72b575f96da6a906', path: 'ubuntu/pool/main/g/glibc'},
  'libc6_2.35-0ubuntu3.6_i386.deb'                          => {sha256: '98211314d9fbc7c51d190b95f6a6f5f09ab77655215bddccf2dc611c0fb109f1', path: 'ubuntu/pool/main/g/glibc'},
  'libdrm-amdgpu1_2.4.113-2~ubuntu0.22.04.1_amd64.deb'      => {sha256: 'a284d1d55956ed2f5f1ece4e2df9104ff87052a6c27a8150574c30c757ecd4b8', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm-amdgpu1_2.4.113-2~ubuntu0.22.04.1_i386.deb'       => {sha256: 'b2ebc5adc8b388d4aaa61b92cad0242be6d8ca1c4314897de944c0dad5cdf29e', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm-common_2.4.113-2~ubuntu0.22.04.1_all.deb'         => {sha256: '35a306712d8b15b30c42ecd73ec087813eb01c0b3125dc8f7ca2b5134e133522', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm-intel1_2.4.113-2~ubuntu0.22.04.1_amd64.deb'       => {sha256: '465de8142e166a59d0c0d6857cd23b76d04ab2680b37fcd16cf4d2ce631f8f92', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm-intel1_2.4.113-2~ubuntu0.22.04.1_i386.deb'        => {sha256: '3aa356efbe951d9a4f8991122863e4d99f26ceb2dccfb15aaf25106ae05c2984', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm-radeon1_2.4.113-2~ubuntu0.22.04.1_amd64.deb'      => {sha256: '579b0d2ccc7800309277fabe517b71a4160b7f26c4745db8e0df25f80576aef7', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm-radeon1_2.4.113-2~ubuntu0.22.04.1_i386.deb'       => {sha256: 'fba2a6d3abe43c217127d86679d486c1e3ab7481621f4fe1b474861d63221d5b', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm2_2.4.113-2~ubuntu0.22.04.1_amd64.deb'             => {sha256: '555925f1caedfd98d89bae3bc11b4fe3401c2c4817dbbafcab25e1144582e946', path: 'ubuntu/pool/main/libd/libdrm'},
  'libdrm2_2.4.113-2~ubuntu0.22.04.1_i386.deb'              => {sha256: '600ff29c1764ff436989bb02cf52d7d57f56b7e6d8f58d19f3e869865fc016c8', path: 'ubuntu/pool/main/libd/libdrm'},
  'libffi8_3.4.2-4_amd64.deb'                               => {sha256: 'b4f88c91fa6f4c942097be6abfc365fb133c5e147640168cbb7704fd855eac10', path: 'ubuntu/pool/main/libf/libffi'},
  'libffi8_3.4.2-4_i386.deb'                                => {sha256: '6a56bbad7cadb5638d57e055fae04e39e2846f67467c1e615a2445c108d6fc90', path: 'ubuntu/pool/main/libf/libffi'},
  'libgl1-mesa-dri_23.2.1-1ubuntu3.1~22.04.2_amd64.deb'     => {sha256: '4edbc2d71f4b78feaf6b40dea0892a85c2457c92632c5fae934165d44c7a9ad5', path: 'ubuntu/pool/main/m/mesa'},
  'libgl1-mesa-dri_23.2.1-1ubuntu3.1~22.04.2_i386.deb'      => {sha256: 'd436bbf7e7673514e0586de6357239773216b7269152ad8e99d0c24c0a127d66', path: 'ubuntu/pool/main/m/mesa'},
  'libllvm15_15.0.7-0ubuntu0.22.04.3_amd64.deb'             => {sha256: '96798f618e4071f7fa684037bd0bb88f15b4e8f2c80cbb64267aa39fe8a8a5ec', path: 'ubuntu/pool/main/l/llvm-toolchain-15'},
  'libllvm15_15.0.7-0ubuntu0.22.04.3_i386.deb'              => {sha256: 'f9db2759d7ec80a5261bc26bd609517cc6552b015e7d41cf102c3cb79dc83a9e', path: 'ubuntu/pool/main/l/llvm-toolchain-15'},
  'libstdc++6_12.3.0-1ubuntu1~22.04_amd64.deb'              => {sha256: '83873058e692936a09649ede2f8e70b87dde1f3f5488db53da8081b81c79a5d9', path: 'ubuntu/pool/main/g/gcc-12'},
  'libstdc++6_12.3.0-1ubuntu1~22.04_i386.deb'               => {sha256: 'd3093cdc75654ef9a9e95ced31fc39248ee27f2db398a0901c1bbe42c850a805', path: 'ubuntu/pool/main/g/gcc-12'},
  'mesa-vulkan-drivers_23.2.1-1ubuntu3.1~22.04.2_amd64.deb' => {sha256: '686f1cab41c89f8259cab02115d60da6bf3f1928118e1cb41a7a49f246b737e5', path: 'ubuntu/pool/main/m/mesa'},
  'mesa-vulkan-drivers_23.2.1-1ubuntu3.1~22.04.2_i386.deb'  => {sha256: 'bb81c14b4ea87f7064cddcb31f95963a8ac0f1e647c524f9a4b9cd0548605d91', path: 'ubuntu/pool/main/m/mesa'},
}
EMUL_PATH = File.realdirpath(`sysctl -qn compat.linux.emul_path`).chomp
MIRROR    = [
  'https://mirrors.kernel.org',
  'https://nl.archive.ubuntu.com'
].sample
SLR_DIR   = ARGV[0] || 'SteamLinuxRuntime_sniper'

if not EMUL_PATH =~ /\/compat\/\w[\w\d]*/
  STDERR.puts "This script doesn't like your compat.linux.emul_path."
  exit(1)
end

if not SLR_DIR =~ /SteamLinuxRuntime_\w+/
  STDERR.puts "Expected the directory name starting with SteamLinuxRuntime_."
  exit(1)
end

if `sysctl -nq vfs.usermount`.to_i != 1
  STDERR.puts "This script requires vfs.usermount=1."
  exit(1)
end

if not system('kldstat -q -m nullfs')
  STDERR.puts "nullfs.ko must be loaded."
  exit(1)
end

if not ENV['HOME']
  STDERR.puts "$HOME is undefined."
  exit(1)
end

steam_linux_runtime_path = find_steamapp_dir(SLR_DIR)
if not steam_linux_runtime_path
  STDERR.puts "Can't find #{SLR_DIR}."
  exit(1)
end

$MOUNTS = []

def mount(fs, from, to, options = nil)
  if fs == 'nullfs' && File.file?(from)
    FileUtils.touch(to)
  else
    FileUtils.mkdir_p(to)
  end
  cmd = "mount #{if options then "-o #{options}" else '' end} -t #{fs} #{from} #{to}"
  STDERR.puts cmd
  system(cmd) || raise
  $MOUNTS << File.realpath(to)
end

platform = Dir[File.join(steam_linux_runtime_path, "#{SLR_DIR.delete_prefix('SteamLinuxRuntime_')}_platform_*")].first
raise if not platform

mroot = File.join(ENV['HOME'], '.steam/mnt', SLR_DIR)
FileUtils.mkdir_p(mroot)

if system('mount', '-o', 'nocover', '-t', 'tmpfs', 'tmpfs', mroot)
  $MOUNTS << mroot
  begin
    Dir.chdir(mroot) do
      system('sh', '-c', 'tar --cd "$0" -c @../usr-mtree.txt.gz | tar -x', '-', File.join(platform, 'files')) || raise
      system('chmod -R u+rwX .') || raise
      FileUtils.ln_s('/', 'usr')

      #~ FileUtils.rm('bin/zenity') #?

      mount('linprocfs', 'linprocfs', 'proc')
      mount('linsysfs',  'linsysfs',  'sys')
      mount('devfs',     'devfs',     'dev')

      # we can't mount anything over devfs from a non-root user,
      # let's abuse emul_path redirection instead
      mount('fdescfs', 'fdescfs',                       File.join('.', EMUL_PATH, 'dev/fd'), 'linrdlnk')
      mount('nullfs',  File.join(EMUL_PATH, 'dev/shm'), File.join('.', EMUL_PATH, 'dev/shm'))

      # placing $HOME under emul_path avoids some redirection issues
      # with Counter-Strike 2, Torchlight 2
      #TODO: there might be mount points under $HOME
      home_dir = File.realpath(ENV['HOME'])
      mount('nullfs', home_dir, File.join('.', home_dir.gsub(/^\/usr\/home/, '/home')))
      mount('nullfs', home_dir, File.join('.', EMUL_PATH, home_dir.gsub(/^\/usr\/home/, '/home')))

      # handy for diagnostics
      if File.exist?(File.join(EMUL_PATH, 'bin/glxgears'))
        FileUtils.cp(File.join(EMUL_PATH, 'bin/glxgears'), 'bin/glxgears')
      end

      # X11
      mount('nullfs', '/tmp', 'tmp')

      # Nvidia
      for source_dir, dest_dir in {
        File.join(EMUL_PATH, 'usr/lib64') => 'lib/x86_64-linux-gnu',
        File.join(EMUL_PATH, 'usr/lib')   => 'lib/i386-linux-gnu'
      }
        for path in Dir[File.join(source_dir, 'lib{nvidia-*.so*,GLX_nvidia*.so*}')]
          if File.symlink?(path)
            FileUtils.ln_s(File.readlink(path), File.join(dest_dir, File.basename(path)))
          else
            FileUtils.cp(path, dest_dir)
          end
        end
      end

      if File.exist?('/usr/local/share/vulkan/icd.d/nvidia_icd.json')
        FileUtils.cp('/usr/local/share/vulkan/icd.d/nvidia_icd.json', 'etc/vulkan/icd.d/')
      end

      # eON workaround
      for i in 0..64 do
        FileUtils.mkdir_p(File.join('.', EMUL_PATH, "sys/devices/system/cpu/cpu#{i}/topology/"))
        File.write(File.join('.', EMUL_PATH, "sys/devices/system/cpu/cpu#{i}/topology/core_id"), i.to_s)
      end

      # dns
      FileUtils.cp('/etc/resolv.conf', 'etc/')

      # dbus
      FileUtils.cp('/etc/machine-id', 'etc/')

      # getpwuid_r()
      FileUtils.cp('/etc/passwd', 'etc/')

      # sound
      FileUtils.cp(File.join(EMUL_PATH, 'etc/asound.conf'), 'etc/')
      FileUtils.cp(File.join(EMUL_PATH, 'usr/lib64/alsa-lib/libasound_module_ctl_oss.so'), 'lib/x86_64-linux-gnu/alsa-lib/')
      FileUtils.cp(File.join(EMUL_PATH, 'usr/lib64/alsa-lib/libasound_module_pcm_oss.so'), 'lib/x86_64-linux-gnu/alsa-lib/')
      FileUtils.cp(File.join(EMUL_PATH, 'usr/lib/alsa-lib/libasound_module_ctl_oss.so'),   'lib/i386-linux-gnu/alsa-lib/')
      FileUtils.cp(File.join(EMUL_PATH, 'usr/lib/alsa-lib/libasound_module_pcm_oss.so'),   'lib/i386-linux-gnu/alsa-lib/')
      mount('nullfs', File.join(EMUL_PATH, 'etc/alsa'),       'etc/alsa') #?
      mount('nullfs', File.join(EMUL_PATH, 'usr/share/alsa'), 'share/alsa')

      # LSU's lib32/lib64 dirs
      lsu_dir = File.realpath(File.join(__dir__, '..'))
      mount('nullfs', lsu_dir, File.join('.', lsu_dir))
    end # chdir(mroot)

    # additional packages we'd like to have
    FileUtils.mkdir_p(DIST_PATH)
    Dir.chdir(DIST_PATH) do
      for pkg, meta in DPKGS do
        if not File.exist?(pkg)
          STDERR.puts "Downloading #{pkg}..."
          system('fetch', "#{MIRROR}/#{meta[:path]}/#{pkg}")
        end
        if `sha256 -q #{pkg}`.chomp != meta[:sha256]
          STDERR.puts "Wrong checksum for #{pkg}."
          raise
        end
        system('sh', '-c', 'tar --to-stdout -xf "$0" data.tar.zst | tar --cd "$1" --strip-components 2 -x usr', '-', pkg, mroot) || raise
        system('sh', '-c', 'tar --to-stdout -xf "$0" data.tar.zst | tar --cd "$1" --exclude usr -x', '-', pkg, mroot) || raise
      end
    end
  rescue
    for path in $MOUNTS.reverse
      system("umount -f #{path}")
    end
    raise
  end
end
