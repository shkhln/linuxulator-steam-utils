#!/usr/bin/env ruby
# encoding: UTF-8

if `sysctl -nq vfs.usermount`.to_i != 1
  STDERR.puts "This script requires vfs.usermount=1."
  exit(1)
end

if not system('kldstat -q -m nullfs')
  STDERR.puts "nullfs.ko must be loaded."
  exit(1)
end

require 'fileutils'

platform = File.realpath(File.join(ENV['HOME'], '.steam/steam/steamapps/common/SteamLinuxRuntime_sniper/sniper_platform_0.20231107.66301'))
mroot    = File.realpath(File.join(ENV['HOME'], '.steam/mnt'))

mtree = Dir.chdir(platform) do
  `zcat usr-mtree.txt.gz`.lines.reject{|line| line.start_with?('#')}.map do |line|
    path, *attrs = line.split(' ')
    attrs = Hash[attrs.map{|a| a.split('=')}]
    [path, attrs]
  end
end

FileUtils.mkdir_p(mroot)

$MOUNTS = []

def mount(fs, from, to, options = nil)
  if fs == 'nullfs' && File.file?(from)
    FileUtils.touch(to)
  else
    FileUtils.mkdir_p(to)
  end
  cmd = "mount #{if options then "-o #{options}" else '' end} -t #{fs} #{from} #{to}"
  STDERR.puts cmd
  if system(cmd)
    $MOUNTS << File.realpath(to)
  end
end

if system("mount -o nocover -t tmpfs tmpfs #{mroot}")
  $MOUNTS << mroot
  begin
    Dir.chdir(mroot) do

      FileUtils.mkdir_p('usr')

      Dir.chdir('usr') do
        #TODO: verify that path doesn't go outside of mroot
        mtree.each do |path, attrs|
          case attrs['type']
            when 'link'
              #~ if attrs['link'] == '../usr/lib/os-release'
                #~ FileUtils.ln_s('/usr/lib/os-release', path)
              #~ else
                FileUtils.ln_s(attrs['link'], path)
              #~ end
            when 'file'
              next if path == './bin/\\133' || path =~ /NetLock_Arany_/
              if attrs['size'] != '0'
                FileUtils.cp(File.join(platform, 'files', path), path)
              else
                FileUtils.touch(path)
              end
              #TODO: set mode?
            when 'dir'
              FileUtils.mkdir_p(path)
            else
              raise "Unknown attr #{attrs['type'].inspect}"
          end
        end

        #~ # wtf with those incorrect symlinks?
        Dir.chdir('lib/x86_64-linux-gnu/dri') do
          FileUtils.ln_s('../../..', 'usr')
        end

        Dir.chdir('lib/i386-linux-gnu/dri') do
          FileUtils.ln_s('../../..', 'usr')
        end
      end # chdir('usr')

      #~ FileUtils.ln_s('/', 'usr') # ?

      FileUtils.ln_s('usr/bin',   'bin')
      FileUtils.ln_s('usr/lib',   'lib')
      FileUtils.ln_s('usr/lib64', 'lib64')

      FileUtils.mv('usr/etc', 'etc') #?
      FileUtils.rm('bin/zenity') #?

      mount('linprocfs', 'linprocfs', 'proc')
      mount('linsysfs',  'linsysfs',  'sys')

      # this a bit fucked up
      mount('devfs', 'devfs', 'dev/.dev')
      Dir.chdir('dev') do
        Dir['.dev/*'].each do |path|
          basename = File.basename(path)
          FileUtils.ln_s(path, basename) if not basename =~ /^(fd|shm)$/
        end
        FileUtils.ln_s('.dev/dsp', 'dsp')
      end

      mount('fdescfs', 'fdescfs', 'dev/fd', 'linrdlnk')

      # glibc doesn't like seeing nullfs at /dev/shm
      FileUtils.mkdir_p('dev/shm')
      Dir.chdir('dev/shm') do
        Dir['/compat/linux/dev/shm/*'].each do |path|          
          mount('nullfs', path, File.basename(path))
        end
      end

      FileUtils.cp('/compat/linux/bin/glxgears', 'bin/glxgears')

      # X11
      mount('nullfs', '/tmp', 'tmp')

      # Nvidia
      for path in Dir[File.join('/compat/linux/usr/lib64', 'lib{nvidia-*.so*,GLX_nvidia*.so*}')]
        FileUtils.cp(path, 'lib/x86_64-linux-gnu/')
      end

      for path in Dir[File.join('/compat/linux/usr/lib', 'lib{nvidia-*.so*,GLX_nvidia*.so*}')]
        FileUtils.cp(path, 'lib/i386-linux-gnu/')
      end

      if File.exist?('/usr/local/share/vulkan/icd.d/nvidia_icd.json')
        FileUtils.cp('/usr/local/share/vulkan/icd.d/nvidia_icd.json', 'etc/vulkan/icd.d/')
      end

      #TODO: there might be mount points under $HOME
      home_dir = File.realpath(ENV['HOME'])
      mount('nullfs', home_dir, File.join('.', home_dir))
      if File.symlink?('/home')
        FileUtils.ln_s('usr/home', 'home')
      end

      #~ FileUtils.cp('/etc/resolv.conf', 'etc/') # ?

      # dbus
      FileUtils.cp('/etc/machine-id', 'etc/')

      # getpwuid_r()
      FileUtils.cp('/etc/passwd', 'etc/')

      # sound
      FileUtils.cp('/compat/linux/etc/asound.conf', 'etc/')
      FileUtils.cp('/compat/linux/usr/lib64/alsa-lib/libasound_module_ctl_oss.so', 'usr/lib/x86_64-linux-gnu/alsa-lib/')
      FileUtils.cp('/compat/linux/usr/lib64/alsa-lib/libasound_module_pcm_oss.so', 'usr/lib/x86_64-linux-gnu/alsa-lib/')
      FileUtils.cp('/compat/linux/usr/lib/alsa-lib/libasound_module_ctl_oss.so', 'usr/lib/i386-linux-gnu/alsa-lib/')
      FileUtils.cp('/compat/linux/usr/lib/alsa-lib/libasound_module_pcm_oss.so', 'usr/lib/i386-linux-gnu/alsa-lib/')

      # just in case
      lsu_dir = File.realpath(File.join(__dir__, '..'))
      mount('nullfs', lsu_dir, File.join('.', lsu_dir))
    end
  rescue
    for path in $MOUNTS.reverse
      system("umount -f #{path}")
    end
    raise
  end
end
