#!/usr/bin/env ruby
# encoding: UTF-8

def check_requirements

  reqs = []

  reqs << [:linux, '32-bit Linux emulation support'] if `sysctl -nq kern.features.linux`  .to_i != 1
  reqs << [:linux, '64-bit Linux emulation support'] if `sysctl -nq kern.features.linux64`.to_i != 1

  mounts = Hash[`mount -p`.lines.each_with_index.map{|line, i| p = line.split(/[ \t]+/); [p[1], {type: p[2], line: i}]}]

  for fs, path in {
    'linprocfs' => '/compat/linux/proc',
    'linsysfs'  => '/compat/linux/sys',
    'devfs'     => '/compat/linux/dev',
    'tmpfs'     => '/compat/linux/dev/shm',
    'fdescfs'   => '/compat/linux/dev/fd',
  }
    m = mounts[path]
    if !(m && m[:type] == fs)
      reqs << [:linux, "#{fs} mounted at #{path}"]
    end
  end

  dev = mounts['/compat/linux/dev']
  shm = mounts['/compat/linux/dev/shm']
  fd  = mounts['/compat/linux/dev/fd']
  if dev && shm && fd
    reqs << [:linux, '/compat/linux/dev mounted before /compat/linux/dev/shm'] if shm[:line] < dev[:line]
    reqs << [:linux, '/compat/linux/dev mounted before /compat/linux/dev/fd' ] if fd [:line] < dev[:line]
  end

  reqs << [:linux, 'write access to /compat/linux/dev/shm'] if not File.writable?('/compat/linux/dev/shm')
  reqs << [:dbus,  '/var/lib/dbus/machine-id existence']    if not File.exist?('/var/lib/dbus/machine-id')
  reqs
end

def linux_run(cmd)
  `env LD_LIBRARY_PATH='' PATH="#{__dir__}/../lxbin:/compat/linux/bin" /compat/linux/bin/bash -c \"#{cmd}\"`.chomp
end

def safe_system(*args)
  raise "Command failed: #{args.join(' ').inspect}" if not system(*args)
end

requirements = check_requirements()
if not requirements.empty?
  STDERR.puts 'Please, make sure the following requirements are satisfied:'
  for req in requirements
    STDERR.puts "  * #{req[1]}"
  end

  if requirements.find{|req| req[0] == :linux}
    STDERR.puts "\nRun (as root) `sysrc linux_enable=YES && service linux start` to enable Linux emulation."
  end

  if requirements.find{|req| req[0] == :dbus}
    STDERR.puts "\nRun (as root) `mkdir -p /var/lib/dbus && /usr/local/bin/dbus-uuidgen --ensure` to generate a machine id."
  end

  exit 1
end

if not File.readable?(__dir__ + '/../lib32/steamfix/steamfix.so')
  STDERR.puts "Can't find steamfix.so"
  exit 1
end

steam_root         = ENV['HOME'] + '/.steam/steam'
steam_runtime_root = ENV['HOME'] + '/.steam/steam/ubuntu12_32/steam-runtime'

if not File.exists?(steam_root)
  STDERR.puts "Steam doesn't appear to be installed for user #{ENV['USER']}. Perhaps you forgot to run steam-install?"
  exit 1
end

if not File.exists?(steam_runtime_root)
  STDERR.puts "Can't find steam-runtime"
  exit 1
end

if ENV['LSU_COREDUMP'] != '1'
  Process.setrlimit(:CORE, 0)
end

# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=248225
Process.setrlimit(:STACK, 8192 * 1024)

steam_runtime_bin_path = linux_run("#{steam_runtime_root}/setup.sh --print-bin-path")
steam_runtime_lib_path = linux_run("#{steam_runtime_root}/run.sh   --print-steam-runtime-library-paths")

bin_path = [
  __dir__ + '/../lxbin',
  steam_runtime_bin_path,
  '/compat/linux/bin'
].compact.join(':')

client_library_path = [
  __dir__ + '/../lib32/steamfix',
  __dir__ + '/../lib32/fakenm',
  __dir__ + '/../lib32/fakepulse',
  __dir__ + '/../lib64/fakepulse',
  __dir__ + '/../lib32/fakeudev',
  __dir__ + '/../lib64/fakeudev',
  __dir__ + '/../lib32/protonfix',
  __dir__ + '/../lib64/protonfix',
  __dir__ + '/../lib64/webfix',
  '/compat/linux/usr/lib64/nss',
  "#{steam_root}/ubuntu12_32",
  "#{steam_root}/ubuntu12_32/panorama",
  steam_runtime_lib_path
].compact.join(':')

games_library_path = [
  __dir__ + '/../lib32/fakepulse',
  __dir__ + '/../lib64/fakepulse',
  __dir__ + '/../lib32/fakeudev',
  __dir__ + '/../lib64/fakeudev',
  __dir__ + '/../lib32/fmodfix',
  __dir__ + '/../lib64/fmodfix',
  __dir__ + '/../lib32/pathfix',
  __dir__ + '/../lib64/pathfix',
  __dir__ + '/../lib32/protonfix',
  __dir__ + '/../lib64/protonfix',
  __dir__ + '/../lib32/monofix',
  __dir__ + '/../lib64/monofix',
  __dir__ + '/../lib64/webfix',
  '/compat/linux/usr/lib64/nss',
  steam_runtime_lib_path
].compact.join(':')

preload = [
  'steamfix.so',
  'libSegFault.so',
  ENV['STEAM_LD_PRELOAD']
].compact.join(':')

ENV['LSU_PROTON_UPGRADE_CMD']     = "env -u LD_PRELOAD PATH=\"#{ENV['PATH']}\" #{File.expand_path('lsu-register-proton', __dir__)}"
ENV['FREEBSD_PATH']               = ENV['PATH']
ENV['PATH']                       = bin_path
ENV['SYSTEM_PATH']                = bin_path
ENV['LD_LIBRARY_PATH']            = client_library_path
ENV['STEAM_RUNTIME']              = steam_runtime_root
ENV['STEAM_RUNTIME_LIBRARY_PATH'] = games_library_path
ENV['STEAM_ZENITY']               = 'zenity'
ENV['SYSTEM_LD_LIBRARY_PATH']     = games_library_path
ENV['LD_PRELOAD']                 = preload

ENV['SDL_AUDIODRIVER'] = 'dsp'
ENV['STEAM_ENABLE_SHADER_CACHE_MANAGEMENT'] = '0' # ?

safe_system(__dir__ + '/../lxbin/patch-steam')
safe_system(__dir__ + '/../lxbin/upgrade-steam-runtime')

exec steam_root + '/ubuntu12_32/steam', *ARGV
